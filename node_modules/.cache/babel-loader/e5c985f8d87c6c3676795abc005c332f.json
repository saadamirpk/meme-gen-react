{"ast":null,"code":"var _jsxFileName = \"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Meme.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../Css/Meme.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  const defimg = \"https://laker.io/wp-content/uploads/2021/06/futurama-shut-up-and-take-my-money.jpeg\";\n  const [meme, setMeme] = useState({\n    image: defimg,\n    topText: \"Shut up\",\n    bottomText: \"And Take My Money\"\n  });\n  const [allMeme, setAllMeme] = useState([{\n    url: \"https://laker.io/wp-content/uploads/2021/06/futurama-shut-up-and-take-my-money.jpeg\"\n  }]);\n  useEffect(function () {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMeme(data.data.memes));\n  }, []);\n\n  function handleForm(event) {\n    setMeme(prevData => {\n      return { ...prevData,\n        [event.target.name]: event.target.value\n      };\n    });\n  }\n\n  function getMemeBtnClick(e) {\n    e.preventDefault();\n    setMeme(prevMeme => {\n      return { ...prevMeme,\n        image: allMeme[Math.floor(Math.random() * allMeme.length)].url\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"myform\",\n      action: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"inp\",\n          type: \"text\",\n          onChange: handleForm,\n          value: meme.topText,\n          name: \"topText\",\n          placeholder: \"Top Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"inp\",\n          type: \"text\",\n          onChange: handleForm,\n          value: meme.bottomText,\n          name: \"bottomText\",\n          placeholder: \"Bottom Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: e => {\n          getMemeBtnClick(e);\n        },\n        children: \"Get a new meme image \\uD83D\\uDDBC\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"meme-img\",\n        src: meme.image,\n        alt: \"Meme Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"top-text txt\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"bottom-text txt\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"EpU0rmNwaTk1oUUe1kqKdMCmu1Y=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Meme.tsx"],"names":["React","useEffect","useState","Meme","defimg","meme","setMeme","image","topText","bottomText","allMeme","setAllMeme","url","fetch","then","res","json","data","memes","handleForm","event","prevData","target","name","value","getMemeBtnClick","e","preventDefault","prevMeme","Math","floor","random","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../Css/Meme.css\";\n\nexport default function Meme() {\n    const defimg =\n        \"https://laker.io/wp-content/uploads/2021/06/futurama-shut-up-and-take-my-money.jpeg\";\n\n    const [meme, setMeme] = useState({\n        image: defimg,\n        topText: \"Shut up\",\n        bottomText: \"And Take My Money\",\n    });\n\n    const [allMeme, setAllMeme] = useState([\n        {\n            url: \"https://laker.io/wp-content/uploads/2021/06/futurama-shut-up-and-take-my-money.jpeg\",\n        },\n    ]);\n\n    useEffect(function () {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then((res) => res.json())\n            .then((data) => setAllMeme(data.data.memes));\n    }, []);\n\n    function handleForm(event: any) {\n        setMeme((prevData) => {\n            return {\n                ...prevData,\n                [event.target.name]: event.target.value,\n            };\n        });\n    }\n\n    function getMemeBtnClick(e: any) {\n        e.preventDefault();\n        setMeme((prevMeme) => {\n            return {\n                ...prevMeme,\n                image: allMeme[Math.floor(Math.random() * allMeme.length)].url,\n            };\n        });\n    }\n\n    return (\n        <main>\n            <form className=\"myform\" action=\"\">\n                <div className=\"flex-box\">\n                    <input\n                        className=\"inp\"\n                        type=\"text\"\n                        onChange={handleForm}\n                        value={meme.topText}\n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                    />\n                    <input\n                        className=\"inp\"\n                        type=\"text\"\n                        onChange={handleForm}\n                        value={meme.bottomText}\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                    />\n                </div>\n                <button\n                    className=\"btn\"\n                    onClick={(e) => {\n                        getMemeBtnClick(e);\n                    }}\n                >\n                    Get a new meme image üñºÔ∏è\n                </button>\n            </form>\n            <div className=\"meme\">\n                <img className=\"meme-img\" src={meme.image} alt=\"Meme Image\" />\n                <p className=\"top-text txt\">{meme.topText}</p>\n                <p className=\"bottom-text txt\">{meme.bottomText}</p>\n            </div>\n        </main>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}