[{"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/index.tsx":"1","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/reportWebVitals.ts":"2","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/App.tsx":"3","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/RenderArray.tsx":"4","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/BoxChallenge.tsx":"5","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Header.tsx":"6","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Greeting.tsx":"7","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/SignUp.tsx":"8","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/RenderObject.tsx":"9","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Meme.tsx":"10","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Counter.tsx":"11","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Data/BoxData.js":"12","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Box.tsx":"13","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Star.tsx":"14","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Count.tsx":"15"},{"size":500,"mtime":1651149457360,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1651149457360,"results":"18","hashOfConfig":"17"},{"size":1200,"mtime":1653428190507,"results":"19","hashOfConfig":"17"},{"size":581,"mtime":1651149457357,"results":"20","hashOfConfig":"17"},{"size":1124,"mtime":1653429793056,"results":"21","hashOfConfig":"17"},{"size":1067,"mtime":1653429319000,"results":"22","hashOfConfig":"17"},{"size":932,"mtime":1651149457357,"results":"23","hashOfConfig":"17"},{"size":5082,"mtime":1651149457357,"results":"24","hashOfConfig":"17"},{"size":1229,"mtime":1651149457357,"results":"25","hashOfConfig":"17"},{"size":2534,"mtime":1651149457357,"results":"26","hashOfConfig":"17"},{"size":1304,"mtime":1651149457357,"results":"27","hashOfConfig":"17"},{"size":229,"mtime":1653429393755,"results":"28","hashOfConfig":"17"},{"size":319,"mtime":1651149457356,"results":"29","hashOfConfig":"17"},{"size":522,"mtime":1651149457358,"results":"30","hashOfConfig":"17"},{"size":174,"mtime":1651149457356,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b67ifc",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/index.tsx",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/reportWebVitals.ts",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/App.tsx",["84"],[],"import React from \"react\";\nimport \"./App.css\";\nimport Greeting from \"./Components/Greeting\";\nimport Header from \"./Components/Header\";\nimport Meme from \"./Components/Meme\";\nimport RenderArray from \"./Components/RenderArray\";\nimport Counter from \"./Components/Counter\";\nimport RenderObject from \"./Components/RenderObject\";\nimport BoxChallenge from \"./Components/BoxChallenge\";\nimport SignUp from \"./Components/SignUp\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <div className=\"app-container\">\n          <Header />\n          <Routes>\n            <Route path=\"/\" element={<Meme />}></Route>\n            <Route path=\"/greet\" element={<Greeting />}></Route>\n            <Route path=\"/counter\" element={<Counter />}></Route>\n            <Route path=\"/object\" element={<RenderObject />}></Route>\n            <Route path=\"/array\" element={<RenderArray />}></Route>\n            <Route path=\"/box\" element={<BoxChallenge />}></Route>\n            <Route path=\"/form\" element={<SignUp />}></Route>\n          </Routes>\n        </div>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n",["85","86"],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/RenderArray.tsx",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/BoxChallenge.tsx",["87","88","89"],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Header.tsx",["90","91"],[],"import React from \"react\";\nimport troll from \"../Images/troll.svg\";\nimport \"../Css/header.css\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Header() {\n  return (\n    <div className=\"flex-container\">\n      <img className=\"logoimg flex-item-start\" src={troll} alt=\"logo\" />\n      <div className=\"flex-item-start title\">Meme Generator</div>\n      <div className=\"flex-item-end subtitle\">\n        <ul>\n          <li className=\"dropdown\">\n            <a href=\"javascript:void(0)\" className=\"dropbtn\">\n              Other Pages <i className=\"arrow down\"></i>\n            </a>\n            <div className=\"dropdown-content\">\n              <Link to={\"/\"}>Meme Generator</Link>\n              <Link to=\"/form\">SignUp Form</Link>\n              <Link to=\"/box\">Boxes</Link>\n              <Link to=\"/counter\">Counter</Link>\n              <Link to=\"/object\">Object Render</Link>\n              <Link to=\"/array\">Array Render</Link>\n              <Link to=\"/greet\">Greetings</Link>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Greeting.tsx",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/SignUp.tsx",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/RenderObject.tsx",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Meme.tsx",["92"],[],"import React, { useEffect, useState } from \"react\";\nimport \"../Css/Meme.css\";\n\nexport default function Meme() {\n    const defimg =\n        \"https://laker.io/wp-content/uploads/2021/06/futurama-shut-up-and-take-my-money.jpeg\";\n\n    const [meme, setMeme] = useState({\n        image: defimg,\n        topText: \"Shut up\",\n        bottomText: \"And Take My Money\",\n    });\n\n    const [allMeme, setAllMeme] = useState([\n        {\n            url: \"https://laker.io/wp-content/uploads/2021/06/futurama-shut-up-and-take-my-money.jpeg\",\n        },\n    ]);\n\n    useEffect(function () {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then((res) => res.json())\n            .then((data) => setAllMeme(data.data.memes));\n    }, []);\n\n    function handleForm(event: any) {\n        setMeme((prevData) => {\n            return {\n                ...prevData,\n                [event.target.name]: event.target.value,\n            };\n        });\n    }\n\n    function getMemeBtnClick(e: any) {\n        e.preventDefault();\n        setMeme((prevMeme) => {\n            return {\n                ...prevMeme,\n                image: allMeme[Math.floor(Math.random() * allMeme.length)].url,\n            };\n        });\n    }\n\n    return (\n        <main>\n            <form className=\"myform\" action=\"\">\n                <div className=\"flex-box\">\n                    <input\n                        className=\"inp\"\n                        type=\"text\"\n                        onChange={handleForm}\n                        value={meme.topText}\n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                    />\n                    <input\n                        className=\"inp\"\n                        type=\"text\"\n                        onChange={handleForm}\n                        value={meme.bottomText}\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                    />\n                </div>\n                <button\n                    className=\"btn\"\n                    onClick={(e) => {\n                        getMemeBtnClick(e);\n                    }}\n                >\n                    Get a new meme image 🖼️\n                </button>\n            </form>\n            <div className=\"meme\">\n                <img className=\"meme-img\" src={meme.image} alt=\"Meme Image\" />\n                <p className=\"top-text txt\">{meme.topText}</p>\n                <p className=\"bottom-text txt\">{meme.bottomText}</p>\n            </div>\n        </main>\n    );\n}\n","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Counter.tsx",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Data/BoxData.js",["93"],[],"export default [\n  {\n    id: 1,\n    on: true,\n  },\n  {\n    id: 2,\n    on: false,\n  },\n  {\n    id: 3,\n    on: false,\n  },\n  {\n    id: 4,\n    on: false,\n  },\n  {\n    id: 5,\n    on: false,\n  },\n  {\n    id: 6,\n    on: false,\n  },\n];\n",["94","95"],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Box.tsx",["96","97"],[],"import { AnyMxRecord } from \"dns\";\nimport React, { useState } from \"react\";\nimport \"../Css/box.css\";\n\nexport default function Box(props: { on: boolean; toggle: any }) {\n    return (\n        <div\n            onClick={props.toggle}\n            className={\"box \" + (props.on ? \"fill\" : \"border\")}\n        ></div>\n    );\n}\n","/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Star.tsx",[],[],"/Users/saadamirpk/Documents/GitHub/meme-gen-react/src/Components/Count.tsx",[],[],{"ruleId":"98","severity":1,"message":"99","line":11,"column":50,"nodeType":"100","messageId":"101","endLine":11,"endColumn":54},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":18,"column":6,"nodeType":"100","endLine":18,"endColumn":11},{"ruleId":"106","severity":1,"message":"108","line":18,"column":6,"nodeType":"100","endLine":18,"endColumn":11,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":39,"column":26,"nodeType":"112","messageId":"113","endLine":39,"endColumn":28},{"ruleId":"114","severity":1,"message":"115","line":14,"column":13,"nodeType":"116","endLine":14,"endColumn":62},{"ruleId":"117","severity":1,"message":"118","line":14,"column":21,"nodeType":"119","messageId":"120","endLine":14,"endColumn":41},{"ruleId":"121","severity":1,"message":"122","line":76,"column":17,"nodeType":"116","endLine":76,"endColumn":79},{"ruleId":"123","severity":1,"message":"124","line":1,"column":1,"nodeType":"125","endLine":26,"endColumn":3},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"98","severity":1,"message":"126","line":1,"column":10,"nodeType":"100","messageId":"101","endLine":1,"endColumn":21},{"ruleId":"98","severity":1,"message":"127","line":2,"column":17,"nodeType":"100","messageId":"101","endLine":2,"endColumn":25},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["128"],"no-negated-in-lhs",["129"],"react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'boxes'. Either include it or remove the dependency array.",["130"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'AnyMxRecord' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [boxes]",{"range":"133","text":"134"},[478,483],"[boxes]"]